/*
  LPS test results file generated on 2021-2-28 at 17:36:25
  on Prolog swi(8,1,9,[]) for program file:
  /Users/mc/git/lps_corner/examples/dining_philosophers_terse.pl_.P
*/

:-dynamic lps_test_result/3,lps_test_result_item/3,lps_test_action_ancestor/3,lps_test_options/1.

% LPS options prior to the test:
lps_test_options([dc]).

% lps_test_result(Stage,Cycle,TestTerm)
lps_test_result(fluents,0,5).
lps_test_result(events,1,0).
lps_test_result(fluents,1,5).
lps_test_result(events,2,5).
lps_test_result(fluents,2,5).
lps_test_result(events,3,7).
lps_test_result(fluents,3,1).
lps_test_result(events,4,2).
lps_test_result(fluents,4,1).
lps_test_result(events,5,2).
lps_test_result(composites,5,2).
lps_test_result(fluents,5,5).
lps_test_result(events,6,2).
lps_test_result(fluents,6,1).
lps_test_result(events,7,2).
lps_test_result(fluents,7,1).
lps_test_result(events,8,2).
lps_test_result(composites,8,2).
lps_test_result(fluents,8,5).
lps_test_result(events,9,1).
lps_test_result(fluents,9,3).
lps_test_result(events,10,1).
lps_test_result(fluents,10,3).
% lps_test_result_item(Stage,Cycle,TestTerm)
lps_test_result_item(fluents,0,available(fork(0))).
lps_test_result_item(fluents,0,available(fork(1))).
lps_test_result_item(fluents,0,available(fork(2))).
lps_test_result_item(fluents,0,available(fork(3))).
lps_test_result_item(fluents,0,available(fork(4))).
lps_test_result_item(fluents,1,available(fork(0))).
lps_test_result_item(fluents,1,available(fork(1))).
lps_test_result_item(fluents,1,available(fork(2))).
lps_test_result_item(fluents,1,available(fork(3))).
lps_test_result_item(fluents,1,available(fork(4))).
lps_test_result_item(events,2,time_to_eat(philosopher(1))).
lps_test_result_item(events,2,time_to_eat(philosopher(3))).
lps_test_result_item(events,2,time_to_eat(philosopher(0))).
lps_test_result_item(events,2,time_to_eat(philosopher(2))).
lps_test_result_item(events,2,time_to_eat(philosopher(4))).
lps_test_result_item(fluents,2,available(fork(0))).
lps_test_result_item(fluents,2,available(fork(1))).
lps_test_result_item(fluents,2,available(fork(2))).
lps_test_result_item(fluents,2,available(fork(3))).
lps_test_result_item(fluents,2,available(fork(4))).
lps_test_result_item(events,3,think(philosopher(4))).
lps_test_result_item(events,3,pickup_forks(fork(4),philosopher(4),fork(0))).
lps_test_result_item(events,3,think(philosopher(2))).
lps_test_result_item(events,3,pickup_forks(fork(2),philosopher(2),fork(3))).
lps_test_result_item(events,3,think(philosopher(0))).
lps_test_result_item(events,3,think(philosopher(3))).
lps_test_result_item(events,3,think(philosopher(1))).
lps_test_result_item(fluents,3,available(fork(1))).
lps_test_result_item(events,4,eat(philosopher(2))).
lps_test_result_item(events,4,eat(philosopher(4))).
lps_test_result_item(fluents,4,available(fork(1))).
lps_test_result_item(events,5,putdown_forks(fork(4),philosopher(4),fork(0))).
lps_test_result_item(events,5,putdown_forks(fork(2),philosopher(2),fork(3))).
lps_test_result_item(composites,5,happens(dine(philosopher(2)),2,5)).
lps_test_result_item(composites,5,happens(dine(philosopher(4)),2,5)).
lps_test_result_item(fluents,5,available(fork(1))).
lps_test_result_item(fluents,5,available(fork(4))).
lps_test_result_item(fluents,5,available(fork(0))).
lps_test_result_item(fluents,5,available(fork(2))).
lps_test_result_item(fluents,5,available(fork(3))).
lps_test_result_item(events,6,pickup_forks(fork(1),philosopher(1),fork(2))).
lps_test_result_item(events,6,pickup_forks(fork(3),philosopher(3),fork(4))).
lps_test_result_item(fluents,6,available(fork(0))).
lps_test_result_item(events,7,eat(philosopher(3))).
lps_test_result_item(events,7,eat(philosopher(1))).
lps_test_result_item(fluents,7,available(fork(0))).
lps_test_result_item(events,8,putdown_forks(fork(1),philosopher(1),fork(2))).
lps_test_result_item(events,8,putdown_forks(fork(3),philosopher(3),fork(4))).
lps_test_result_item(composites,8,happens(dine(philosopher(3)),2,8)).
lps_test_result_item(composites,8,happens(dine(philosopher(1)),2,8)).
lps_test_result_item(fluents,8,available(fork(0))).
lps_test_result_item(fluents,8,available(fork(1))).
lps_test_result_item(fluents,8,available(fork(2))).
lps_test_result_item(fluents,8,available(fork(3))).
lps_test_result_item(fluents,8,available(fork(4))).
lps_test_result_item(events,9,pickup_forks(fork(0),philosopher(0),fork(1))).
lps_test_result_item(fluents,9,available(fork(2))).
lps_test_result_item(fluents,9,available(fork(3))).
lps_test_result_item(fluents,9,available(fork(4))).
lps_test_result_item(events,10,eat(philosopher(0))).
lps_test_result_item(fluents,10,available(fork(2))).
lps_test_result_item(fluents,10,available(fork(3))).
lps_test_result_item(fluents,10,available(fork(4))).
% lps_test_action_ancestor(Call,T1,T2)
lps_test_action_ancestor(dine(philosopher(0)),2,11).
lps_test_action_ancestor(dine(philosopher(3)),2,8).
lps_test_action_ancestor(dine(philosopher(1)),2,8).
lps_test_action_ancestor(dine(philosopher(2)),2,5).
lps_test_action_ancestor(dine(philosopher(4)),2,5).
lps_test_action_ancestor(dine(philosopher(1)),2,_13308).
lps_test_action_ancestor(dine(philosopher(3)),2,_13308).
lps_test_action_ancestor(dine(philosopher(0)),2,_13308).
lps_test_action_ancestor(dine(philosopher(2)),2,_13308).
lps_test_action_ancestor(dine(philosopher(4)),2,_13308).
