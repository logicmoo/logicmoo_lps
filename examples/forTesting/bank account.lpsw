
% bank transfer Bob Kowalski 14 Oct 2016
maxTime(9).

initial_state([	balance(bob, 0), balance(fariba, 100)]).

action(transfer(From, To, Amount)).
fluent(balance(_,_)).

initiated( happens(transfer(From, To, Amount), T1, T2), balance(To, New), [holds(balance(To, Old), T1), lps_plus(Old, Amount, New)]).
initiated( happens(transfer(From, To, Amount), T1, T2), balance(From, New), [holds(balance(From, Old), T1), lps_minus(Old, Amount, New)]).
terminated( happens(transfer(From, To, Amount), T1, T2), balance(To, Old), []).
terminated( happens(transfer(From, To, Amount), T1, T2), balance(From, Old), []).


observe([ transfer(fariba, bob, 10)],2).
%observe([ ],2).
%observe([ transfer(fariba, bob, 20)],3).
%observe([], Cycle) :- Cycle>4, Cycle<11.		% Prolog code here.

reactive_rule(
	[happens(transfer(fariba, bob, X), T1, T2) ],
	[happens(transfer(bob, fariba, 10), T2, T3)]
	).

reactive_rule(
	[happens(transfer(bob, fariba, Y), T1, T2) ],
	[happens(transfer(fariba, bob, 20), T2, T3)]
	).

d_pre([happens(transfer(From, To, Amount), T1, T2), holds(balance(From, Old), T1), lps_less(Old, Amount)]).
d_pre([happens(transfer(From, To1, Amount1), T1, T2), happens(transfer(From, To2, Amount2), T1, T2),lps_diff(To1, To2)]).
d_pre([happens(transfer(From1, To, Amount1), T1, T2), happens(transfer(From2, To2, Amount2), T1, T2),lps_diff(From1, From2)]).

% Useful LPS library?

l_timeless(lps_time(T), [current_time(T)]).  %Notice current_time is defined in the interpreter.
l_timeless(lps_same(X, Y), [X == Y]).
l_timeless(lps_diff(X, Y), [X \== Y]).
l_timeless(lps_less(X, Y), [X < Y]).
l_timeless(lps_more(X, Y), [X > Y]).
l_timeless(lps_leq(X, Y), [X =< Y]).
l_timeless(lps_geq(X, Y), [X >= Y]).
l_timeless(lps_inc(X, X1), [X1 is X + 1]).
l_timeless(lps_dec(X, X1), [X1 is X - 1]).
l_timeless(lps_write(X), [write(X),nl]).
l_timeless(lps_plus(N, Y, NewY), [NewY is N + Y]).
l_timeless(lps_minus(N, Y, NewY), [NewY is N - Y]).

