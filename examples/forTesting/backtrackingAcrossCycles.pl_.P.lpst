/*
  LPS test results file generated on 2018-11-27 at 9:48:58
  on Prolog swi(7,7,19,[]) for program file:
  /Users/mc/git/logicalcontracts/examples/forTesting/backtrackingAcrossCycles.pl_.P
*/

:-dynamic lps_test_result/3,lps_test_result_item/3,lps_test_action_ancestor/3,lps_test_options/1.

% LPS options prior to the test:
lps_test_options([dc]).

% lps_test_result(Stage,Cycle,TestTerm)
lps_test_result(fluents,0,1).
lps_test_result(events,1,0).
lps_test_result(fluents,1,1).
lps_test_result(events,2,1).
lps_test_result(fluents,2,1).
lps_test_result(events,3,2).
lps_test_result(fluents,3,2).
lps_test_result(events,4,2).
lps_test_result(fluents,4,2).
lps_test_result(events,5,2).
lps_test_result(fluents,5,2).
lps_test_result(events,6,3).
lps_test_result(fluents,6,2).
lps_test_result(events,7,0).
lps_test_result(fluents,7,2).
lps_test_result(events,8,0).
lps_test_result(fluents,8,2).
lps_test_result(events,9,0).
lps_test_result(fluents,9,2).
lps_test_result(events,10,0).
lps_test_result(fluents,10,2).
% lps_test_result_item(Stage,Cycle,TestTerm)
lps_test_result_item(fluents,0,f(1)).
lps_test_result_item(fluents,1,f(1)).
lps_test_result_item(events,2,a(1)).
lps_test_result_item(fluents,2,f(1)).
lps_test_result_item(events,3,e).
lps_test_result_item(events,3,a(1)).
lps_test_result_item(fluents,3,f(1)).
lps_test_result_item(fluents,3,f(2)).
lps_test_result_item(events,4,a(1)).
lps_test_result_item(events,4,a(2)).
lps_test_result_item(fluents,4,f(1)).
lps_test_result_item(fluents,4,f(2)).
lps_test_result_item(events,5,a(1)).
lps_test_result_item(events,5,a(2)).
lps_test_result_item(fluents,5,f(1)).
lps_test_result_item(fluents,5,f(2)).
lps_test_result_item(events,6,a(1)).
lps_test_result_item(events,6,a(2)).
lps_test_result_item(events,6,b(2)).
lps_test_result_item(fluents,6,f(1)).
lps_test_result_item(fluents,6,f(2)).
lps_test_result_item(fluents,7,f(1)).
lps_test_result_item(fluents,7,f(2)).
lps_test_result_item(fluents,8,f(1)).
lps_test_result_item(fluents,8,f(2)).
lps_test_result_item(fluents,9,f(1)).
lps_test_result_item(fluents,9,f(2)).
lps_test_result_item(fluents,10,f(1)).
lps_test_result_item(fluents,10,f(2)).
% lps_test_action_ancestor(Call,T1,T2)
