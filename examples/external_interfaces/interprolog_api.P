/* 
** Author(s): Miguel Calejo
** Contact:   info@interprolog.com, http://interprolog.com
** Copyright (C) InterProlog Consulting / Renting Point - Serviços de Informática Lda., Portugal 2016
** Use and distribution, without any warranties, under the terms of the 
** Apache 2.0 License, readable in http://www.apache.org/licenses/LICENSE-2.0.html
*/

% DEPRECATED, not working currently; TODO: adapt LPSEngine in interprolog for SWISubprocessEngine
% SEE myJavaHook.pl instead
%
% Utility predicates required by old external LPS APIs

:- import ipPrologEngine/1, java/3 from interprolog.
:- import current_time/1, option/1 from usermod. % current LPS cycle
:- import collect_current_fluents/2, collect_current_actions/2 from interpreter.
:- import read_atom_to_term/2 from string.

% lps_java_hook(-ExternalObservations)
% Predicate to be called from LPS interpreter, e.g. 
%  go(YourProgram,[...,cycle_hook(lps_java_hook,FluentTemplates,ActionTemplates),..])
% If it fails, the LPS computation is terminated, otherwise it attemps to continue
% Notice that it is necessary for the LPS program to still define the observe/2 predicate,
% even if with observe([], _AnyAcceptableCycle).
% This Prolog file must be preloaded, and it is assumed we're running under a LPSEngine (which loads it of course)

lps_java_hook(Obs) :- 
	current_time(T),
	ipPrologEngine(E), 
	option(cycle_hook(lps_java_hook,Fluents,Actions)),
	collect_current_fluents(Fluents,F), 
	collect_current_actions(Actions,A),
	% TODO: send inserted/deleted deltas rather than all tuples
	java(E, R, cycleHook(int(T),terms(F),terms(A)) ),
	( R==null -> fail ; 
	R = string(ObsStr), (ObsStr='[]'->Obs=[] /* XSB bug...*/;read_atom_to_term(ObsStr,Obs))).



